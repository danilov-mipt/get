# Написать скрипт, который реализует АЦП при помощи последовательного перебора значений
# создать скрипт 5-1-adc-simple.py
# в созданном скрипте импортировать модуль работы с GPIO на Raspberry Pi
import RPi.GPIO as GPIO
import time

# объявить переменную dac - список указанных на плате номеров GPIO-пинов в области DAC
dac = [10, 9, 11, 5, 6, 13, 19, 26]
len_dac = len(dac)
# объявить переменную comp - c номером GPIO-пина, указанного на плате в секции COMP
comp = 4
# объявить переменную troyka - c номером GPIO-пина, указанного на плате в секции TROYKA MODULE
troyka = 17
# настроить режим обращения к GPIO
GPIO.setmode(GPIO.BCM)
# одной строкой кода настроить на выход все 8 GPIO-пинов из списка dac
GPIO.setup(dac, GPIO.OUT)
# настроить на выход GPIO-пин тройка-модуля и задать значение по умолчанию при помощи аргумента initial в функции GPIO.setup
GPIO.setup(troyka, GPIO.OUT)
# настроить на вход GPIO-пин comp
GPIO.setup(comp, GPIO.IN)

# добавить функцию перевода десятичного числа в список 0 и 1 из прошлого занятия
def dec2bin(dec, bits):
    binary = [0] * bits
    for i in range(bits):
        binary[i] = (dec >> i) % 2
    return binary

# описать функцию adc(), которая возвращает десятичное число, пропорциональное напряжению клемме S тройка-модуля
def adc():
    # в функции должен выполнятся последовательный перебор значений и установка их на dac и считывание значения с comp
    GPIO.output(dac, 0)
    time.sleep(0.005)
    for i in range(256):
        out = dec2bin(i, len_dac)
        GPIO.output(dac, out)
        inp = GPIO.input(comp)
        if inp == 0:
            return i
        time.sleep(0.005)
    return 0


# добавить в скрипт два блока: try и finally
# в блоке try:
try:
    # в бесконечном цикле вызывать функцию adc()
    while True:
        voltage = adc()
        #print(voltage, '{:.2f} V'.format(3.3 * voltage / 255))
        time.sleep(0.5)
        print('{:.3f} V'.format(3.3 * voltage / 255))

# в блоке finally подать 0 на все использовавшиеся выходные пины и очистить настройки GPIO
finally:
    GPIO.output(dac, 0)
    GPIO.cleanup()
# возвращаемое значение функции переводить в напряжение
# на экран выводить цифровое значение и соответствующее ему значение напряжения
# При запуске скрипта для установления напряжения на SIG воспользоваться потенциометром. Проверить напряжение на клемме S при помощи мультиметра и сравнить с выведенным на экран

